<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neuedu.shop.mapper.CategoryMapper">

    <!-- 封装一个常用的查询头 -->
    <sql id="baseSQL">
        select id, category_name, category_description, category_parentId, leaf, grade
        from t_category
    </sql>


    <select id="findAll" resultMap="findAll">
        select id, category_name, category_description, category_parentId, leaf, grade
        from t_category
    </select>

    <resultMap id="findAll" type="com.neuedu.shop.pojo.Category">
        <id column="id" property="id" />
        <result column="category_name" property="name" />
        <result column="category_parentId" property="pid" />
        <result column="leaf" property="leaf" />
        <result column="grade" property="grade" />
        <result column="category_description" property="desc" />
    </resultMap>

    <!-- 添加根类别 -->
    <insert id="addRootCategory" parameterType="com.neuedu.shop.pojo.Category">
        insert into t_category values (null, #{name}, #{desc}, 0, 1, 1);
    </insert>

    <!-- 树状列表展示 递归头 -->
    <select id="findToTree" resultMap="findToTree">
        <include refid="baseSQL" />
        where category_parentId=0
    </select>

    <!-- 递归体 -->
    <resultMap id="findToTree" type="com.neuedu.shop.pojo.Category">
        <id column="id" property="id" />
        <result column="category_name" property="name" />
        <result column="category_parentId" property="pid" />
        <result column="leaf" property="leaf" />
        <result column="grade" property="grade" />
        <result column="category_description" property="desc" />
        <collection column="id" property="children" select="selectChildrenByPid" ofType="com.neuedu.shop.pojo.Category"></collection>
    </resultMap>

    <!-- 递归方法 -->
    <select id="selectChildrenByPid" resultMap="findToTree" parameterType="int">
        <include refid="baseSQL" />
        where category_parentId=#{id}
    </select>
    
    <!-- 添加子类别 -->
    <insert id="addChildCategory" parameterType="Category">
        insert into t_category values(null, #{name}, #{desc}, #{pid}, #{leaf}, #{grade})
    </insert>

    <!-- 查询父级别的grade的值 -->
    <select id="findByParentId" resultType="int">
        select grade from t_category where id = #{pid}
    </select>
    
    <!-- 更新父节点的叶子结点 status 为非 -->
    <update id="updateParent" parameterType="int">
        update t_category set leaf=0 where id=#{pid}
    </update>

    <select id="findById" resultMap="findAll" parameterType="com.neuedu.shop.pojo.Category">
        select id, category_description, category_name, category_parentId, leaf, grade from t_category where id=#{id}
    </select>

    <update id="modifyCategoryDesc" parameterType="com.neuedu.shop.pojo.Category">
        update t_category
        set category_description=#{desc}
        where id=#{id}
    </update>

    <select id="findThree" resultMap="findAll">
        select id, category_name, category_description, category_parentId, leaf, grade
        from t_category where grade=3
    </select>

    <!-- 1.统计孩子结点的个数，用做判断是否可以删除，找儿子的过程 -->
    <select id="countChild" resultType="int">
        select count(id)
        from t_category
        where category_parentId = #{id};
    </select>

    <!-- 3. 判断该类别的父类别是否需要更新，找父亲的过程 -->
    <select id="judgeParentStatus" resultType="int">
        select count(id) from t_category where category_parentId=#{pid}
    </select>

    <!-- 4. 删除后更新该商品的父类别 -->
    <update id="updateParentAfterDelete" parameterType="int">
        update t_category set leaf=1 where id=#{pid}
    </update>

    <!-- 删除类别 -->
    <delete id="delete" parameterType="int">
        delete from t_category where id = #{id}
    </delete>


</mapper>
